name: update-stack-manually

on:
  workflow_dispatch:
    inputs:
      stack:
        description: 'Select the specific stack to update (e.g., acm-prod or observability)'
        type: choice
        required: true
        options:
          - acm-prod
          - observability
      environment:
        description: 'Select the environment (e.g., dev) - required for non-suffixed stacks'
        type: choice
        required: false
        options:
          - dev
          - staging
          - prod
          - default
      action:
        description: 'Select the action to perform (preview or update)'
        type: choice
        required: true
        options:
          - preview
          - update

env:
  AWS_DEFAULT_REGION: us-east-1

jobs:
  extract-and-set-vars:
    runs-on: ubuntu-latest
    outputs:
      stack-name: ${{ steps.set-vars.outputs.stack-name }}
      apply: ${{ steps.set-vars.outputs.apply }}
    steps:
      - name: Extract stack parts and set output
        id: set-vars
        run: |
          STACK=${{ github.event.inputs.stack }}
          ENVIRONMENT=${{ github.event.inputs.environment }}
          ACTION=${{ github.event.inputs.action }}
          APPLY=false

          if [ "$ACTION" = "update" ]; then
            APPLY=true
          fi

          # Check if the stack has a suffix
          if [[ "$STACK" == *"-"* ]]; then
            STACK_NAME=$STACK
            if [ "$ENVIRONMENT" != "default" ]; then
              echo "Environment input should be 'default' for suffixed stacks."
              exit 1
            fi
          else
            if [ -z "$ENVIRONMENT" ] || [ "$ENVIRONMENT" = "default" ]; then
              echo "Environment input is required for non-suffixed stacks."
              exit 1
            fi
            STACK_NAME=$STACK
          fi

          echo "::set-output name=stack-name::$STACK_NAME"
          echo "::set-output name=apply::$APPLY"

  update-stack:
    needs: extract-and-set-vars
    uses: ./.github/workflows/_run_pulumi.yaml
    with:
      work-dir: ./.infrastructure/${{ needs.extract-and-set-vars.outputs.stack-name }}
      stack: ${{ github.event.inputs.stack }}
      runner-stage: ${{ github.event.inputs.environment }}
      apply: ${{ fromJson(needs.extract-and-set-vars.outputs.apply) }}
